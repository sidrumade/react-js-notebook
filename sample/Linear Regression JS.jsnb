{"notebook_hash":"51518f20","notebook_name":"Linear Regression JS","cellContext_data":[{"cellindex_value":0,"output":["data loaded","success"],"editorsValue":"var data1;\n\nasync function loadData() {\n  const data = await d3.csv('https://raw.githubusercontent.com/ywchiu/riii/master/data/house-prices.csv');\n  const Price=[] ;\n  const SqFt =[] ;\n  const Bedrooms=[];\n  const Bathrooms =[];\n  const Offers =[];\n  data.forEach(d => {\n    SqFt.push(parseFloat(d.SqFt));\n    Price.push(parseFloat(d.Price));\n    Bedrooms.push(parseInt(d.Bedrooms));\n    Bathrooms.push(parseInt(d.Bathrooms));\n    Offers.push(parseInt(d.Offers));\n  });\n  return { SqFt, Price,Bedrooms,Bathrooms,Offers };\n}\n\nasync function run() {\n  data1 = await loadData();\n  return data1;\n}\n\n// Wrap the run() function in a Promise and wait for it to finish before trying to access plotData and layout:\nnew Promise(resolve => {\n  run().then(() => {\n    show('data loaded');\n    resolve();\n  });\n}).then(() => {\nshow('success');\n\n});\n\n","rows":36,"error":"","plotly_input":[]},{"cellindex_value":1,"output":[],"editorsValue":"var tableData = [{  type: 'table',  header: {    values: [['<b>SqFit</b>'], ['<b>Price</b>'],['<b>Bedrooms</b>'], ['<b>Bathrooms</b>'],['<b>Offers</b>']],\n    align: ['center', 'center'],\n    line: {width: 1, color: 'black'},\n    fill: {color: '#506784'},\n    font: {family: 'Arial', size: 12, color: 'white'} ,\n  },\n  cells: {\n    values: [data1.SqFt, data1.Price, data1.Bedrooms,data1.Bathrooms,data1.Offers],\n    align: ['center', 'center'],\n    line: {color: '#506784', width: 1},\n    font: {family: 'Arial', size: 11, color: ['#506784']}\n  }\n}];\nvar layoutx = {\n height: 600,\n}","rows":16,"plotly_input":[],"error":""},{"cellindex_value":2,"output":[],"editorsValue":"show_graph(tableData,layoutx);","rows":1,"plotly_input":{"data":[{"type":"table","header":{"values":[["<b>SqFit</b>"],["<b>Price</b>"],["<b>Bedrooms</b>"],["<b>Bathrooms</b>"],["<b>Offers</b>"]],"align":["center","center"],"line":{"width":1,"color":"black"},"fill":{"color":"#506784"},"font":{"family":"Arial","size":12,"color":"white"}},"cells":{"values":[[1790,2030,1740,1980,2130,1780,1830,2160,2110,1730,2030,1870,1910,2150,2590,1780,2190,1990,1700,1920,1790,2000,1690,1820,2210,2290,2000,1700,1600,2040,2250,1930,2250,2280,2000,2080,1880,2420,1720,1740,1560,1840,1990,1920,1940,1810,1990,2050,1980,1700,2100,1860,2150,2100,1650,1720,2190,2240,1840,2090,2200,1610,2220,1910,1860,1450,2210,2040,2140,2080,1950,2160,1650,2040,2140,1900,1930,2280,2130,1780,2190,2140,2050,2410,1520,2250,1900,1880,1930,2010,1920,2150,2110,2080,2150,1970,2440,2000,2060,2080,2010,2260,2410,2440,1910,2530,2130,1890,1990,2110,1710,1740,1940,2000,2010,1900,2290,1920,1950,1920,1930,1930,2060,1900,2160,2070,2020,2250],[114300,114200,114800,94700,119800,114600,151600,150700,119200,104000,132500,123000,102600,126300,176800,145800,147100,83600,111400,167200,116200,113800,91700,106100,156400,149300,137000,99300,69100,188000,182000,112300,135000,139600,117800,117100,117500,147000,131300,108200,106600,133600,105600,154000,166500,103200,129800,90300,115900,107500,151100,91100,117400,130800,81300,125700,140900,152300,138100,155400,180900,100900,161300,120500,130300,111100,126200,151900,93600,165600,166700,157600,107300,125700,144200,106900,129800,176500,121300,143600,143400,184300,164800,147700,90500,188300,102700,172500,127700,97800,143100,116500,142600,157100,160600,152500,133300,126800,145500,171000,103200,123100,136800,211200,82300,146900,108500,134000,117000,108700,111600,114900,123600,115700,124500,102500,199500,117800,150200,109700,110400,105600,144800,119700,147900,113500,149900,124600],[2,4,3,3,3,3,3,4,4,3,3,2,3,3,4,4,3,3,2,3,3,3,3,3,4,4,4,3,2,4,4,2,3,5,2,3,2,4,3,3,2,4,2,3,3,3,2,3,2,3,3,2,2,3,3,2,3,4,3,4,3,2,4,2,3,2,3,4,3,4,3,4,3,3,3,2,3,4,3,4,3,4,2,3,2,4,4,3,3,2,4,3,3,3,4,2,3,2,3,3,3,3,3,4,3,4,3,3,3,3,2,2,2,3,4,3,5,3,3,2,2,3,2,3,4,2,3,3],[2,2,2,2,3,2,3,2,2,3,2,2,2,3,3,2,3,3,2,3,2,2,2,2,3,3,2,2,2,3,3,2,3,3,2,3,2,3,2,2,2,3,2,2,3,2,3,2,2,2,2,2,3,2,2,2,2,3,3,2,3,2,3,3,2,2,3,3,2,3,3,2,2,3,3,2,2,3,2,2,3,3,2,3,2,3,2,3,3,2,2,2,2,3,3,2,3,2,2,3,2,3,3,3,2,3,2,2,3,2,2,2,2,2,3,3,4,2,2,2,3,3,2,3,3,2,3,3],[2,3,1,3,3,2,3,2,3,3,3,2,4,5,4,1,4,4,1,2,3,4,3,3,2,3,3,2,3,1,3,2,3,4,3,3,2,4,1,2,1,2,3,1,2,3,2,6,2,3,3,3,4,3,3,2,3,3,1,1,1,2,2,2,2,1,4,3,4,3,3,1,3,2,3,2,2,3,3,1,4,2,1,2,3,2,4,1,2,4,2,2,2,2,3,1,3,1,1,2,5,5,4,3,4,4,4,1,3,3,1,2,2,3,2,3,1,2,3,4,3,3,1,3,3,2,1,4]],"align":["center","center"],"line":{"color":"#506784","width":1},"font":{"family":"Arial","size":11,"color":["#506784"]}}}],"layout":{"height":600}},"error":""},{"cellindex_value":1,"output":[],"editorsValue":"// Calculate the regression line using linear regression formula\nconst x= data1.SqFt;\nconst y= data1.Price;\nconst n = x.length;\nconst sum_x = x.reduce((a, b) => a + b, 0);\nconst sum_y = y.reduce((a, b) => a + b, 0);\nconst sum_xy = x.map((xi, i) => xi * y[i]).reduce((a, b) => a + b, 0);\nconst sum_xx = x.map(xi => xi * xi).reduce((a, b) => a + b, 0);\nconst slope = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);\nconst intercept = (sum_y - slope * sum_x) / n;\n\n// Create the trace for the data points\nconst dataTrace = {\n  x: x,\n  y: y,\n  mode: 'markers',\n  name: 'Data Points'\n};\n\n// Create the trace for the regression line\nconst lineTrace = {\n  x: x,\n  y: x.map(xi => slope * xi + intercept),\n  mode: 'lines',\n  name: 'Linear Regression'\n};\n\n// Create the layout\nvar layout2 = {\n          title: 'Price vs. Squarefit',\n          xaxis: {\n            title: 'Squarefit (sq ft)'\n          },\n          yaxis: {\n            title: 'Price ($)'\n          }\n        };\n\n// Combine the traces into an array\nvar data2 = [dataTrace, lineTrace];\n","rows":41,"error":"","plotly_input":[]},{"cellindex_value":2,"output":[],"editorsValue":"show_graph(data2,layout2)","rows":1,"plotly_input":{"data":[{"x":[1790,2030,1740,1980,2130,1780,1830,2160,2110,1730,2030,1870,1910,2150,2590,1780,2190,1990,1700,1920,1790,2000,1690,1820,2210,2290,2000,1700,1600,2040,2250,1930,2250,2280,2000,2080,1880,2420,1720,1740,1560,1840,1990,1920,1940,1810,1990,2050,1980,1700,2100,1860,2150,2100,1650,1720,2190,2240,1840,2090,2200,1610,2220,1910,1860,1450,2210,2040,2140,2080,1950,2160,1650,2040,2140,1900,1930,2280,2130,1780,2190,2140,2050,2410,1520,2250,1900,1880,1930,2010,1920,2150,2110,2080,2150,1970,2440,2000,2060,2080,2010,2260,2410,2440,1910,2530,2130,1890,1990,2110,1710,1740,1940,2000,2010,1900,2290,1920,1950,1920,1930,1930,2060,1900,2160,2070,2020,2250],"y":[114300,114200,114800,94700,119800,114600,151600,150700,119200,104000,132500,123000,102600,126300,176800,145800,147100,83600,111400,167200,116200,113800,91700,106100,156400,149300,137000,99300,69100,188000,182000,112300,135000,139600,117800,117100,117500,147000,131300,108200,106600,133600,105600,154000,166500,103200,129800,90300,115900,107500,151100,91100,117400,130800,81300,125700,140900,152300,138100,155400,180900,100900,161300,120500,130300,111100,126200,151900,93600,165600,166700,157600,107300,125700,144200,106900,129800,176500,121300,143600,143400,184300,164800,147700,90500,188300,102700,172500,127700,97800,143100,116500,142600,157100,160600,152500,133300,126800,145500,171000,103200,123100,136800,211200,82300,146900,108500,134000,117000,108700,111600,114900,123600,115700,124500,102500,199500,117800,150200,109700,110400,105600,144800,119700,147900,113500,149900,124600],"mode":"markers","name":"Data Points"},{"x":[1790,2030,1740,1980,2130,1780,1830,2160,2110,1730,2030,1870,1910,2150,2590,1780,2190,1990,1700,1920,1790,2000,1690,1820,2210,2290,2000,1700,1600,2040,2250,1930,2250,2280,2000,2080,1880,2420,1720,1740,1560,1840,1990,1920,1940,1810,1990,2050,1980,1700,2100,1860,2150,2100,1650,1720,2190,2240,1840,2090,2200,1610,2220,1910,1860,1450,2210,2040,2140,2080,1950,2160,1650,2040,2140,1900,1930,2280,2130,1780,2190,2140,2050,2410,1520,2250,1900,1880,1930,2010,1920,2150,2110,2080,2150,1970,2440,2000,2060,2080,2010,2260,2410,2440,1910,2530,2130,1890,1990,2110,1710,1740,1940,2000,2010,1900,2290,1920,1950,1920,1930,1930,2060,1900,2160,2070,2020,2250],"y":[115613.97974564141,132468.29612393386,112102.66383349715,128956.9802117896,139490.92794822238,114911.71656321257,118423.03247535683,141597.71749550893,138086.40158336467,111400.40065106831,132468.29612393386,121232.08520507225,124041.13793478764,140895.4543130801,171795.03433994958,114911.71656321257,143704.5070427955,129659.24339421844,109293.61110378175,124743.4011172165,115613.97974564141,130361.50657664731,108591.34792135289,117720.76929292797,145109.0334076532,150727.13886708402,130361.50657664731,109293.61110378175,102270.97927949323,133170.5593063627,147918.0861373686,125445.66429964534,147918.0861373686,150024.87568465516,130361.50657664731,135979.61203607812,121934.34838750109,159856.5602386591,110698.13746863946,112102.66383349715,99461.92654977783,119125.29565778568,129659.24339421844,124743.4011172165,126147.92748207418,117018.50611049912,129659.24339421844,133872.82248879157,128956.9802117896,109293.61110378175,137384.13840093583,120529.82202264338,140895.4543130801,137384.13840093583,105782.29519163749,110698.13746863946,143704.5070427955,147215.82295493977,119125.29565778568,136681.875218507,144406.77022522435,102973.24246192208,145811.29659008206,124041.13793478764,120529.82202264338,91737.03154306045,145109.0334076532,133170.5593063627,140193.19113065125,135979.61203607812,126850.19066450305,141597.71749550893,105782.29519163749,133170.5593063627,140193.19113065125,123338.8747523588,125445.66429964534,150024.87568465516,139490.92794822238,114911.71656321257,143704.5070427955,140193.19113065125,133872.82248879157,159154.29705623025,96652.8738200624,147918.0861373686,123338.8747523588,121934.34838750109,125445.66429964534,131063.76975907615,124743.4011172165,140895.4543130801,138086.40158336467,135979.61203607812,140895.4543130801,128254.71702936076,161261.0866035168,130361.50657664731,134575.0856712204,135979.61203607812,131063.76975907615,148620.34931979745,159154.29705623025,161261.0866035168,124041.13793478764,167581.45524537648,139490.92794822238,122636.61156992993,129659.24339421844,138086.40158336467,109995.8742862106,112102.66383349715,126147.92748207418,130361.50657664731,131063.76975907615,123338.8747523588,150727.13886708402,124743.4011172165,126850.19066450305,124743.4011172165,125445.66429964534,125445.66429964534,134575.0856712204,123338.8747523588,141597.71749550893,135277.34885364928,131766.03294150502,147918.0861373686],"mode":"lines","name":"Linear Regression"}],"layout":{"title":{"text":"Price vs. Squarefit"},"xaxis":{"title":{"text":"Squarefit (sq ft)"},"type":"linear","range":[1374.8771407297095,2665.1228592702905],"autorange":true},"yaxis":{"title":{"text":"Price ($)"},"type":"linear","range":[58097.50656167979,222202.4934383202],"autorange":true}}},"error":""},{"cellindex_value":3,"output":[],"editorsValue":"","rows":5,"plotly_input":{}}],"run_all":false,"active_cell_index":5,"folders":[],"currentFolder":null}